package model;
// Generated 04/07/2017 11:51:55 by Hibernate Tools 4.3.1


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Testingclassexecution generated by hbm2java
 */
@Entity
@Table(name="testingclassexecution"
    ,catalog="provdmtest"
)
public class Testingclassexecution  implements java.io.Serializable {


     private Integer idtestingClassExecution;
     private Testingclass testingclass;
     private Testingsuiteexecution testingsuiteexecution;
     private Float executionTime;
     private Set<Testingmethodexecution> testingmethodexecutions = new HashSet<Testingmethodexecution>(0);
     private Set<Wasinformedby> wasinformedbies = new HashSet<Wasinformedby>(0);
     private Set<Used> useds = new HashSet<Used>(0);

    public Testingclassexecution() {
    }

	
    public Testingclassexecution(Testingclass testingclass, Testingsuiteexecution testingsuiteexecution) {
        this.testingclass = testingclass;
        this.testingsuiteexecution = testingsuiteexecution;
    }
    public Testingclassexecution(Testingclass testingclass, Testingsuiteexecution testingsuiteexecution, Float executionTime, Set<Testingmethodexecution> testingmethodexecutions, Set<Wasinformedby> wasinformedbies, Set<Used> useds) {
       this.testingclass = testingclass;
       this.testingsuiteexecution = testingsuiteexecution;
       this.executionTime = executionTime;
       this.testingmethodexecutions = testingmethodexecutions;
       this.wasinformedbies = wasinformedbies;
       this.useds = useds;
    }
    
    public Testingclassexecution(Testingclass testingclass, Testingsuiteexecution testingsuiteexecution, Float executionTime) {
       this.testingclass = testingclass;
       this.testingsuiteexecution = testingsuiteexecution;
       this.executionTime = executionTime;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="idtestingClassExecution", unique=true, nullable=false)
    public Integer getIdtestingClassExecution() {
        return this.idtestingClassExecution;
    }
    
    public void setIdtestingClassExecution(Integer idtestingClassExecution) {
        this.idtestingClassExecution = idtestingClassExecution;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="testingClass_idtestingClass", nullable=false)
    public Testingclass getTestingclass() {
        return this.testingclass;
    }
    
    public void setTestingclass(Testingclass testingclass) {
        this.testingclass = testingclass;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="testingSuiteExecution_idtestingSuiteExecution", nullable=false)
    public Testingsuiteexecution getTestingsuiteexecution() {
        return this.testingsuiteexecution;
    }
    
    public void setTestingsuiteexecution(Testingsuiteexecution testingsuiteexecution) {
        this.testingsuiteexecution = testingsuiteexecution;
    }

    
    @Column(name="executionTime", precision=12, scale=0)
    public Float getExecutionTime() {
        return this.executionTime;
    }
    
    public void setExecutionTime(Float executionTime) {
        this.executionTime = executionTime;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="testingclassexecution")
    public Set<Testingmethodexecution> getTestingmethodexecutions() {
        return this.testingmethodexecutions;
    }
    
    public void setTestingmethodexecutions(Set<Testingmethodexecution> testingmethodexecutions) {
        this.testingmethodexecutions = testingmethodexecutions;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="testingclassexecution")
    public Set<Wasinformedby> getWasinformedbies() {
        return this.wasinformedbies;
    }
    
    public void setWasinformedbies(Set<Wasinformedby> wasinformedbies) {
        this.wasinformedbies = wasinformedbies;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="testingclassexecution")
    public Set<Used> getUseds() {
        return this.useds;
    }
    
    public void setUseds(Set<Used> useds) {
        this.useds = useds;
    }




}


